name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.1.1'

      - name: setup jdk
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      - name: Spring Boot Build
        run: ./gradlew clean build --exclude-task test

      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backendonboarding:latest .

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Hub Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/backendonboarding:latest

      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_WEB_HOST }}
          username: ${{ secrets.EC2_WEB_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: ${{ secrets.EC2_WEB_SSH_PORT }}
          timeout: 60s
          script: |
            sudo docker stop backendonboarding || true
            sudo docker rm backendonboarding || true
            
            # Create .env file with environment variables
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" | sudo tee -a /home/ubuntu/.env
            echo "DB_URL=${{ secrets.DB_URL }}" | sudo tee -a /home/ubuntu/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" | sudo tee -a /home/ubuntu/.env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" | sudo tee -a /home/ubuntu/.env
            
            # Docker 이미지를 최신 버전으로 업데이트
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backendonboarding:latest
            
            # 기존의 latest 태그가 아닌 오래된 이미지 정리
            docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | grep -v "latest" | awk '{print $2}' | xargs -r sudo docker rmi -f
            
            # 컨테이너 실행 (이름: backendonboarding)
            sudo docker run -d -p 8080:8080 --name backendonboarding --env-file /home/ubuntu/.env ${{ secrets.DOCKERHUB_USERNAME }}/backendonboarding:latest
            
          
            # EC2 요청을 컨테이너의 8080 포트로 전달 (포트포워딩 설정)
            sudo iptables -t nat -A PREROUTING -p tcp --dport 8080 -j DNAT --to-destination 127.0.0.1:8080
            sudo iptables -t nat -A POSTROUTING -j MASQUERADE

